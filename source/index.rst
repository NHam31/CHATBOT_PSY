.. PsyBot Documentation master file, created by
   sphinx-quickstart on Sat Dec 29 2024.
   You can adapt this file completely to your liking, but it should at least contain
   the root `toctree` directive.

.. toctree::
   :maxdepth: 2
   :caption: Contents:

   introduction
   fonctionnalites
   prerequis
   installation
   collecte_de_donnees
   detection_emotions
   generation_recommandations
   modele_de_langage
   reponse_chatbot
   historique_chatbot
   affichage
   interface_streamlit
   conclusion


Introduction
============

Ce projet est un chatbot psychologique d√©velopp√© pour aider les utilisateurs √† identifier et √† g√©rer leurs √©motions, principalement en d√©tectant des troubles comme le stress, l'anxi√©t√©, la d√©pression, et les difficult√©s d'adaptabilit√©. Il offre des recommandations personnalis√©es telles que des vid√©os et des exercices de relaxation, ainsi que des conseils pratiques pour am√©liorer le bien-√™tre mental.

Fonctionnalit√©s
===============
Le chatbot offre plusieurs fonctionnalit√©s pour soutenir les utilisateurs dans la gestion de leurs √©motions, notamment :
- D√©tection des √©motions √† partir de l'entr√©e utilisateur.
- G√©n√©ration de recommandations de vid√©os et exercices bas√©es sur les √©motions d√©tect√©es.
- Interaction en temps r√©el avec l'utilisateur via une interface Streamlit.
- Historique des interactions pour suivre l'√©volution du bien-√™tre de l'utilisateur.

Pr√©requis
==========
Avant de pouvoir ex√©cuter ce projet, assurez-vous que les √©l√©ments suivants sont install√©s :
- Python 3.8+
- Streamlit
- Langchain
- Ollama (mod√®le Llama 3.2):
- Autres biblioth√®ques n√©cessaires : `difflib`, `random`, etc.

Installation
============
- Clonez le d√©p√¥t du projet :
  .. code-block:: python
      git clone https://github.com/votre-utilisateur/chatbot-psy.git
      cd chatbot-psy
- Installez les d√©pendances n√©cessaires :
  .. code-block:: python
   pip install python
   pip install streamlit
   pip install OllamaLLM
   pip install langchain_ollama
   pip install difflib
   
  .. code-block:: python
   import streamlit as st
   from langchain_ollama import OllamaLLM
   import difflib
   import random
- Lancez l'application Streamlit :
.. code-block:: python
   streamlit run chatbot_psy.py

Collecte de donn√©es
===================
Les donn√©es utilis√©es dans ce projet comprennent des vid√©os, des exercices, et des ressources pour chaque √©motion cibl√©e (stress, anxi√©t√©, d√©pression, etc.). Ces ressources sont soigneusement s√©lectionn√©es pour offrir un soutien pertinent aux utilisateurs.

D√©tection des √©motions
======================
Le chatbot d√©tecte plusieurs √©motions en analysant le texte entr√© par l'utilisateur. √Ä l'aide de mots-cl√©s sp√©cifiques pour chaque √©motion (stress, d√©pression, anxi√©t√©, et adaptabilit√©), le syst√®me utilise la fonction `detect_and_recommend_emotions` pour identifier les √©motions pr√©sentes dans le message de l'utilisateur.
.. code-block:: python
   def detect_and_recommend_emotions(response):
      keywords = {
         "stress": ["stress√©", "stress"],
         "depression": ["d√©prim√©", "triste", "sans espoir"],
         "anxiety": ["anxi√©t√©", "angoisse", "peur"],
         "adaptability": ["changement", "adaptabilit√©"]
      }
    detected_emotions = []
    for category, terms in keywords.items():
        for term in terms:
            if term in response.lower():
                detected_emotions.append(category)
    return detected_emotions

G√©n√©ration des recommandations al√©atoires
===========================================
Une fois les √©motions d√©tect√©es, le syst√®me g√©n√®re des recommandations personnalis√©es. Cela inclut des vid√©os et des exercices tir√©s d'une base de donn√©es pr√©√©tablie. Les vid√©os et exercices sont choisis de mani√®re al√©atoire pour fournir une vari√©t√© d'options aux utilisateurs.
.. code-block:: python 
   def get_random_resources(emotion):
      if emotion in resources:
        resource = resources[emotion]
        selected_videos = []
        selected_exercises = []
         if "videos" in resource:
            for category, items in resource["videos"].items():
                selected_videos.extend(random.sample(items, min(2, len(items))))
         if "exercise" in resource:
            selected_exercises = random.sample(resource["exercise"], min(3, len(resource["exercise"])))
         return selected_videos, selected_exercises
      return [], []

Mod√®le de langage
=================
Le mod√®le de langage utilis√© est le mod√®le Llama 3.2 d'Ollama, qui permet d'analyser le texte et de g√©n√©rer des r√©ponses pertinentes. Le mod√®le est charg√© via la biblioth√®que Langchain et utilise l'API d'Ollama pour fournir des r√©ponses bas√©es sur le contexte de l'utilisateur.
.. code-block:: python 
   def get_model():
    return OllamaLLM(model="llama3.2")

R√©ponse Chatbot
===============
Le chatbot g√©n√®re une r√©ponse compl√®te qui inclut une analyse de l'√©motion de l'utilisateur ainsi que des recommandations pratiques. La r√©ponse est ensuite envoy√©e √† l'utilisateur via l'interface Streamlit.

Historique Chatbot
==================
Toutes les interactions entre l'utilisateur et le chatbot sont enregistr√©es dans l'historique de la session. Cela permet √† l'utilisateur de revoir ses conversations pr√©c√©dentes et d'observer les tendances de son bien-√™tre au fil du temps.
.. code-block:: python
         if 'history' not in st.session_state:
            st.session_state.history = []  

Affichage
=========
Les r√©ponses du chatbot sont affich√©es √† l'utilisateur dans un format lisible via Streamlit. Les vid√©os et exercices recommand√©s sont fournis avec des liens cliquables. L'historique des messages est √©galement affich√© pour permettre une vue d'ensemble des √©changes.
- Afficher la r√©ponse du chatbot apr√®s la saisie de l'utilisateur:
    .. code-block:: python
      if user_input:
         st.write(f"### Chatbot :")
         st.write(response)

- Afficher l'historique
   .. code-block:: python
      st.write("### Historique de la conversation :")
      for message in st.session_state.history:
         st.write(message) 

Interface STREAMLIT
===================
L'interface utilisateur est d√©velopp√©e √† l'aide de Streamlit. Elle permet une interaction facile et fluide avec le chatbot. L'utilisateur peut entrer ses messages, consulter les r√©ponses du chatbot, et explorer les recommandations sous forme de vid√©os et d'exercices.
.. code-block:: python
    st.title("Chatbot PSY üåº")
    # Introduction
    st.write("Bonjour ! Je suis Psy, votre chatbot bien-√™tre. Comment puis-je vous aider aujourd'hui ?")
    # Initialisation de 'input' dans session_state si elle n'existe pas
    if 'area' not in st.session_state:
        st.session_state.area = ""  # Initialisation √† une cha√Æne vide

    # Zone de saisie de texte pour l'utilisateur
    user_input = st.text_area("Vous : ", value=st.session_state.area, key="input_box")
    # Informations compl√©mentaires
        st.sidebar.title("√Ä propos")
        st.sidebar.info(
            """
            Ce chatbot est con√ßu pour vous aider √† identifier les probl√®mes li√©s aux √©motions et √† fournir des conseils utiles. 
            Veuillez noter que ce chatbot ne remplace pas un professionnel de la sant√© mentale.
            """
        )

Conclusion
==========
Ce chatbot fournit un soutien √©motionnel accessible et personnalis√© pour les utilisateurs en fonction de leurs √©motions. Il combine des techniques d'analyse de texte, des recommandations bas√©es sur des ressources vari√©es, et une interface interactive pour am√©liorer le bien-√™tre mental des √©tudiants et de toute autre personne cherchant du soutien.


